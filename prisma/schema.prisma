// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NotificationTracker {
  id        String                    @id @default(cuid())
  userId    String
  user      User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType String                    @map("event_type") // e.g. welcome, kyc_uploaded, kyc_failed, enable_2fa
  channel   String // email, sms, push, inapp
  messageId String                    @map("message_id") // Template ID/version used
  payload   Json? // Arbitrary metadata (kycId, txId, reason, etc)
  sentAt    DateTime                  @map("sent_at") // When it was communicated
  status    NotificationTrackerStatus // success, failed, pending
  uniqueKey String?                   @unique @map("unique_key") // For deduping one-time messages (e.g. welcome:userId)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  seenAt    DateTime?                 @map("seen_at") // When user saw the notification (for in-app)

  @@index([userId])
  @@index([eventType])
  @@index([channel])
  @@index([status])
  @@index([sentAt])
  @@index([uniqueKey])
}

// User Management
model User {
  id                  String    @id @default(cuid())
  uid                 Int       @unique @default(autoincrement()) // optional numeric ID
  email               String    @unique
  username            String    @unique
  password            String
  firstName           String?
  lastName            String?
  phone               String?
  profilePicture      String?   @db.VarChar(1024)
  loginType           String    @default("PASSWORD") // PASSWORD, GOOGLE_OAUTH
  isEmailVerified     Boolean   @default(false)
  isPhoneVerified     Boolean   @default(false)
  isKycVerified       Boolean   @default(false)
  withdrawalWhitelist Boolean   @default(false)
  kycLevel            Int       @default(0)
  isActive            Boolean   @default(true)
  isFrozen            Boolean   @default(false)
  google2FASecret     String?
  isGoogle2FAEnabled  Boolean   @default(false)
  lastLoginAt         DateTime?
  deletedAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  spotOrders                  SpotOrder[]
  deposits                    Deposit[]
  withdrawals                 Withdrawal[]
  beneficiaryAddresses        BeneficiaryWalletAddress[]
  userSettings                UserSettings?
  loginHistory                LoginHistory[]
  kycSubmissions              KycSubmission[]
  referralCodes               ReferralCode[]
  referrals                   Referral[]                    @relation("Referrer")
  referredBy                  Referral?                     @relation("Referred")
  notifications               Notification[]
  notificationTrackers        NotificationTracker[]
  ImageRecord                 ImageRecord[]
  Device                      Device[]
  UserEvent                   UserEvent[]
  UserKucoinAccount           UserKucoinAccount?
  UserKucoinSubAccount        UserKucoinSubAccount[]
  UserKucoinDepositAddress    UserKucoinDepositAddress[]
  UserKucoinDepositHistory    UserKucoinDepositHistory[]
  UserKucoinWithdrawalHistory UserKucoinWithdrawalHistory[]
  UserKucoinWithdrawalQuota   UserKucoinWithdrawalQuota[]
  assetHoldingTrends          UserAssetHoldingTrend[]

  @@index([email])
  @@index([username])
  @@index([isActive])
}

// User Settings
model UserSettings {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultOrderType         String   @default("LIMIT")
  defaultTimeInForce       String   @default("GTC")
  enableEmailNotifications Boolean  @default(true)
  enablePushNotifications  Boolean  @default(true)
  enableTradeNotifications Boolean  @default(true)
  enablePriceAlerts        Boolean  @default(true)
  notificationPreferences  Json? // e.g., { email: ["DEPOSIT", "WITHDRAWAL"], push: ["PRICE_ALERT"] }
  withdrawalWhitelist      String[]
  loginAlertEnabled        Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

// KYC Submissions
model KycSubmission {
  id                 String    @id @default(cuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  level              Int
  status             String    @default("PENDING") // PENDING, PROCESSING, APPROVED, REJECTED, NOT_SUBMITTED
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  nationality        String
  idType             String // passport,drivinglicense,idcard,bvn
  idNumber           String
  idFrontImage       String
  idBackImage        String?
  selfieImage        String
  addressProof       String?
  utilityBill        String?
  expireDate         DateTime?
  submittedAt        DateTime  @default(now())
  reviewedAt         DateTime?
  reviewedBy         String?
  rejectionReason    String?
  rejectReason       String? // From KuCoin API
  sentToKucoin       Boolean   @default(false)
  sentAt             DateTime?
  goodForSending     Boolean   @default(false) // To avoid sending if details are not proper
  kucoinSubmissionId String?
  checkedAt          DateTime?
  errorMessage       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([sentToKucoin])
  @@index([sentAt])
}

// User KuCoin Accounts
model UserKucoinAccount {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountName String   @unique
  uid         String   @unique
  level       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // API Key relationship
  apiKey      UserKucoinApiKey?
  subAccounts UserKucoinSubAccount[]

  @@index([userId])
  @@index([uid])
  @@index([accountName])
}

// User KuCoin API Keys
model UserKucoinApiKey {
  id                  String            @id @default(cuid())
  userKucoinAccountId String            @unique
  userKucoinAccount   UserKucoinAccount @relation(fields: [userKucoinAccountId], references: [id], onDelete: Cascade)
  apiKey              String            @unique
  secretKey           String // Encrypted
  passphrase          String // Encrypted
  permissions         String[]
  ipWhitelist         String[]
  label               String
  isActive            Boolean           @default(true)
  lastUsedAt          DateTime?
  deletedAt           DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@index([userKucoinAccountId])
  @@index([apiKey])
}

// User KuCoin Sub Accounts (for user-created sub-accounts)
model UserKucoinSubAccount {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  password    String // Encrypted
  accountName String   @unique
  uid         String   @unique
  level       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // API Key relationship
  apiKeys             UserKucoinSubApiKey[]
  UserKucoinAccount   UserKucoinAccount?    @relation(fields: [userKucoinAccountId], references: [id])
  userKucoinAccountId String?

  @@index([userId])
  @@index([uid])
  @@index([accountName])
}

// User KuCoin Sub API Keys (for user-created sub-account APIs)
model UserKucoinSubApiKey {
  id                     String               @id @default(cuid())
  userKucoinSubAccountId String               @unique
  userKucoinSubAccount   UserKucoinSubAccount @relation(fields: [userKucoinSubAccountId], references: [id], onDelete: Cascade)
  apiKey                 String               @unique
  secretKey              String // Encrypted
  passphrase             String // Encrypted
  permissions            String[]
  ipWhitelist            String[]
  label                  String
  isActive               Boolean              @default(true)
  lastUsedAt             DateTime?
  deletedAt              DateTime?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@index([userKucoinSubAccountId])
  @@index([apiKey])
}

// User KuCoin Deposit Addresses
model UserKucoinDepositAddress {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         String
  balance         Decimal  @default(0) @db.Decimal(32, 16)
  memo            String?
  chainId         String   @map("chain_id")
  chainName       String   @map("chain_name")
  currency        String
  contractAddress String?  @map("contract_address")
  to              String   @default("TRADE")
  expirationDate  BigInt   @default(0) @map("expiration_date")
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notified        Boolean  @default(false)
  cexHoldBalance  Decimal  @default(0) @map("cex_hold_balance") @db.Decimal(32, 16)
  cexDebtBalance  Decimal  @default(0) @map("cex_debt_balance") @db.Decimal(32, 16)

  @@index([userId])
  @@index([currency])
  @@index([chainId])
  @@index([address])
  @@index([userId, currency, chainId])
}

// User KuCoin Deposit History
model UserKucoinDepositHistory {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency          String
  chain             String   @default("")
  status            String
  address           String
  memo              String?
  isInner           Boolean  @default(false) @map("is_inner")
  amount            Decimal  @db.Decimal(32, 16)
  fee               Decimal  @default(0) @db.Decimal(32, 16)
  walletTxId        String?  @map("wallet_tx_id")
  createdAt         BigInt   @map("created_at")
  updatedAt         BigInt   @map("updated_at")
  remark            String?
  arrears           Boolean  @default(false)
  kucoinDepositId   String?  @map("kucoin_deposit_id")
  syncedAt          DateTime @default(now()) @map("synced_at")
  lastScanTimestamp BigInt?  @map("last_scan_timestamp")
  notified          Boolean  @default(false)

  @@unique([userId, kucoinDepositId])
  @@index([userId])
  @@index([currency])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, currency, createdAt])
}

// User KuCoin Withdrawal History
model UserKucoinWithdrawalHistory {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency             String
  chain                String   @default("")
  status               String
  address              String
  memo                 String?
  isInner              Boolean  @default(false) @map("is_inner")
  amount               Decimal  @db.Decimal(32, 16)
  fee                  Decimal  @default(0) @db.Decimal(32, 16)
  walletTxId           String?  @map("wallet_tx_id")
  createdAt            BigInt   @map("created_at")
  updatedAt            BigInt   @map("updated_at")
  remark               String?
  withdrawalId         String?  @map("withdrawal_id")
  internalWithdrawalId String?  @map("internal_withdrawal_id")
  syncedAt             DateTime @default(now()) @map("synced_at")
  lastScanTimestamp    BigInt?  @map("last_scan_timestamp")
  notified             Boolean  @default(false)

  @@unique([userId, withdrawalId])
  @@index([userId])
  @@index([currency])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, currency, createdAt])
}

// User KuCoin Withdrawal Quotas - Cache withdrawal quota information
model UserKucoinWithdrawalQuota {
  id                       String   @id @default(cuid())
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency                 String
  chain                    String   @default("")
  limitBTCAmount           String   @map("limit_btc_amount")
  usedBTCAmount            String   @map("used_btc_amount")
  quotaCurrency            String   @map("quota_currency")
  limitQuotaCurrencyAmount String   @map("limit_quota_currency_amount")
  usedQuotaCurrencyAmount  String   @map("used_quota_currency_amount")
  remainAmount             String   @map("remain_amount")
  availableAmount          String   @map("available_amount")
  withdrawMinFee           String   @map("withdraw_min_fee")
  innerWithdrawMinFee      String   @map("inner_withdraw_min_fee")
  withdrawMinSize          String   @map("withdraw_min_size")
  isWithdrawEnabled        Boolean  @map("is_withdraw_enabled")
  precision                Int
  chainName                String   @map("chain_name")
  reason                   String?
  lockedAmount             String   @map("locked_amount")
  cachedAt                 DateTime @default(now()) @map("cached_at")
  expiresAt                DateTime @map("expires_at")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  @@unique([userId, currency, chain])
  @@index([userId])
  @@index([currency])
  @@index([chain])
  @@index([expiresAt])
  @@index([userId, currency])
  @@index([userId, expiresAt])
}

// Spot Orders
model SpotOrder {
  id                String   @id @default(cuid())
  orderId           String   @unique @map("order_id") // KuCoin order ID
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientOid         String?  @map("client_oid") // Client order ID
  symbol            String // Trading pair symbol (e.g., "BTC-USDT", "ETH-USDT")
  side              String? // Order side: "buy" or "sell"
  type              String? // Order type: "limit", "market", "stop", "stop_limit"
  status            String?  @default("DONE") // Order status: "NEW", "OPEN", "MATCH", "DONE"
  timeInForce       String?  @default("GTC") @map("time_in_force") // Time in force: "GTC", "GTT", "IOC", "FOK"
  price             Decimal? @db.Decimal(32, 16) // Order price (for limit orders)
  quantity          Decimal? @db.Decimal(32, 16) // Total order quantity
  filledQuantity    Decimal  @default(0) @map("filled_quantity") @db.Decimal(32, 16) // Filled quantity
  remainingQuantity Decimal  @default(0) @map("remaining_quantity") @db.Decimal(32, 16) // Remaining quantity
  stopPrice         Decimal? @map("stop_price") @db.Decimal(32, 16) // Stop price (for stop orders)
  funds             Decimal? @db.Decimal(32, 16) // Funds amount (for market orders)
  fee               Decimal  @default(0) @db.Decimal(32, 16) // Trading fee
  feeAsset          String?  @map("fee_asset") // Fee asset/currency (e.g., "USDT", "BTC")
  stp               String? // Self-trade prevention: "CN", "CO", "CB", "DC"
  remark            String? // Order remark/notes (custom user note)
  postOnly          Boolean  @default(false) @map("post_only") // Post-only order flag
  hidden            Boolean  @default(false) // Hidden order flag
  iceberg           Boolean  @default(false) // Iceberg order flag
  visibleSize       Decimal? @map("visible_size") @db.Decimal(32, 16) // Visible size for iceberg orders
  cancelAfter       Int?     @map("cancel_after") // Cancel after time in seconds (for GTT orders)
  isStopOrder       Boolean  @default(false) @map("is_stop_order") // Whether this is a stop order
  stopPriceType     String?  @map("stop_price_type") // Stop price type: "TP" (trade price), "IP" (index price), "MP" (mark price)
  isOcoOrder        Boolean  @default(false) @map("is_oco_order") // Whether this is an OCO order
  limitPrice        Decimal? @map("limit_price") @db.Decimal(32, 16) // Limit price (for OCO orders)
  leverage          Decimal? @db.Decimal(5, 2) // Leverage multiplier (for margin orders)
  tradeType         String   @default("TRADE") @map("trade_type") // Trade type: "TRADE", "MARGIN", "FUTURES", "SPOT"
  orderSource       String   @default("API") @map("order_source") // Order source: "API", "WS"
  kuCoinResponse    Json?    @map("ku_coin_response") // Full KuCoin API response data
  operationType     String   @map("operation_type") // Operation type: "CANCEL", "SYNC", "PLACE"
  operationStatus   String   @default("SUCCESS") @map("operation_status") // Operation status: "SUCCESS", "FAILED"
  operationMessage  String?  @map("operation_message") // Error/success message
  parentOrderId     String?  @map("parent_order_id") // Parent order ID (for modified orders)
  batchId           String?  @map("batch_id") // Batch operation ID (for batch operations)
  createdAt         DateTime // Order creation time from KuCoin
  updatedAt         DateTime @updatedAt // Last update time
  lastUpdatedAt     DateTime @updatedAt // Last updated time from KuCoin
  createdAtDB       DateTime @default(now()) // Database record creation time
  syncCount         Int      @default(3) @map("sync_count") // Number of times to sync the status

  @@index([userId])
  @@index([orderId])
  @@index([clientOid])
  @@index([symbol])
  @@index([status])
  @@index([operationType])
  @@index([createdAt])
  @@index([userId, symbol])
  @@index([userId, status])
}

// Deposits
model Deposit {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  txHash                String   @unique
  amount                Decimal  @db.Decimal(32, 16)
  confirmations         Int      @default(0)
  requiredConfirmations Int      @default(3)
  status                String   @default("PENDING")
  fromAddress           String?
  toAddress             String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([txHash])
}

// Withdrawals
model Withdrawal {
  id                String                    @id @default(cuid())
  userId            String
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  beneficiaryId     String?                   @map("beneficiary_id")
  beneficiary       BeneficiaryWalletAddress? @relation(fields: [beneficiaryId], references: [id])
  amount            Decimal                   @db.Decimal(32, 16)
  fee               Decimal                   @default(0) @db.Decimal(32, 16)
  totalAmount       Decimal                   @db.Decimal(32, 16)
  toAddress         String
  memo              String?
  status            String                    @default("PENDING") // CANCELLED, PROCESSING, COMPLETED, FAILED, REJECTED
  txHash            String?                   @unique
  emailVerified     Boolean                   @default(false) @map("email_verified")
  google2FAVerified Boolean                   @default(false) @map("google2fa_verified")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  notified          Boolean                   @default(false)
  note              String? // Admin note or reason for rejection

  @@index([userId])
  @@index([status])
  @@index([txHash])
  @@index([beneficiaryId])
}

// Beneficiary Wallet Addresses
model BeneficiaryWalletAddress {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String // Display name for the beneficiary
  address    String // Wallet address
  memo       String? // Memo/tag for chains that require it
  chain      String // Blockchain chain (e.g., "BTC", "ETH", "TRC20", "BEP20")
  currency   String // Currency symbol (e.g., "BTC", "ETH", "USDT")
  isActive   Boolean   @default(true) @map("is_active")
  isApproved Boolean   @default(false) @map("is_approved")
  approvedAt DateTime? @map("approved_at")
  approvedBy String?   @map("approved_by") // Admin ID who approved
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  withdrawals Withdrawal[]

  @@unique([userId, address, chain])
  @@index([userId])
  @@index([address])
  @@index([chain])
  @@index([currency])
  @@index([isActive])
  @@index([isApproved])
}

// Login History
model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String
  userAgent String
  location  String?
  createdAt DateTime @default(now())
  extraData Json?

  @@index([userId])
  @@index([createdAt])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

// Referral System
model ReferralCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([code])
}

model Referral {
  id             String   @id @default(cuid())
  referrerId     String
  referrer       User     @relation("Referrer", fields: [referrerId], references: [id])
  referredId     String   @unique
  referred       User     @relation("Referred", fields: [referredId], references: [id])
  commissionRate Decimal  @default(0.20) @db.Decimal(5, 4)
  createdAt      DateTime @default(now())

  @@index([referrerId])
  @@index([referredId])
}

// Image Records
model ImageRecord {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl  String    @db.VarChar(1024)
  type      ImageType
  fileName  String?
  fileSize  Int?
  mimeType  String?
  metadata  Json?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([type])
  @@index([userId, type])
  @@index([isActive])
}

// System Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model Device {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Device metadata
  ipAddress String?
  userAgent String
  location  Json? // { lat, lng, city, country }
  timezone  String?

  // Fingerprint (hash of UA + IP + maybe OS for uniqueness)
  fingerprint String

  // Relationships
  refreshTokens RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, fingerprint]) // ensures only one device per unique fingerprint
}

model RefreshToken {
  id       String @id @default(uuid())
  deviceId String
  device   Device @relation(fields: [deviceId], references: [id])

  token     String   @unique // hashed refresh token
  isActive  Boolean  @default(true)
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User Events for logging user activities
model UserEvent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventType String   @map("event_type") // e.g., LOGIN, LOGOUT, TRADE, DEPOSIT, WITHDRAWAL, PROFILE_UPDATE, etc.
  eventData Json?    @map("event_data") // Flexible JSON field for event-specific data
  metadata  Json? // Additional metadata (IP, user agent, location, etc.)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([userId, createdAt])
}

// Admin Management
model Admin {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  password           String // Hashed password
  role               AdminRole @default(ADMIN)
  permissions        String[] // Array of permission strings
  isActive           Boolean   @default(true)
  lastLoginAt        DateTime?
  failedAttempts     Int       @default(0)
  lockedUntil        DateTime?
  profilePicture     String?   @db.VarChar(1024)
  phone              String?
  department         String?
  isGoogle2FAEnabled Boolean   @default(false) @map("is_google_2fa_enabled")
  google2FASecret    String?
  createdBy          String? // Admin ID who created this admin
  creator            Admin?    @relation("AdminCreator", fields: [createdBy], references: [id])
  createdAdmins      Admin[]   @relation("AdminCreator")
  deletedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  adminLogs          AdminLog[]
  AdminRefreshTokens AdminRefreshToken[]

  @@index([email])
  @@index([isActive])
  @@index([role])
  @@index([createdAt])
}

// Admin Refresh Tokens for secure token rotation
model AdminRefreshToken {
  id        String   @id @default(cuid())
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  token     String   @unique // Hashed refresh token
  isActive  Boolean  @default(true)
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([adminId])
  @@index([token])
  @@index([expiresAt])
  @@index([isActive])
}

// Admin Activity Logs
model AdminLog {
  id         String   @id @default(cuid())
  adminId    String
  admin      Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  action     String // e.g., LOGIN, LOGOUT, KYC_APPROVE, KYC_REJECT, USER_FREEZE, etc.
  resource   String? // e.g., USER, KYC, SYSTEM_CONFIG
  resourceId String? // ID of the affected resource
  details    Json? // Additional details about the action
  ipAddress  String
  userAgent  String
  createdAt  DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([adminId, createdAt])
}

// Enum for admin roles
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  SUPPORT
  READONLY
}

// Notification Templates for predefined messages
model NotificationTemplate {
  id           String   @id @default(cuid())
  eventType    String   @unique @map("event_type") // e.g. welcome, login_alert, password_reset, etc.
  title        String // Template title
  message      String // Template message with placeholders
  placeholders Json // JSON object describing available placeholders and their descriptions
  channels     String[] // Available channels: email, sms, push, inapp
  isActive     Boolean  @default(true) @map("is_active")
  priority     Int      @default(1) // Priority level for notifications
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([eventType])
  @@index([isActive])
}

// Enum for notification tracker status
enum NotificationTrackerStatus {
  SUCCESS
  FAILED
  PENDING
}

// Logo storage for crypto tokens
model Logo {
  id        String   @id @default(cuid())
  token     String   @unique // Token symbol like BTC, ETH, SOL
  name      String // Logo name/filename
  data      String   @db.Text // Base64 encoded webp image data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([createdAt])
}

// User Asset Holding Trends - Store daily snapshots of user asset holdings
model UserAssetHoldingTrend {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date            DateTime @db.Date // Store as DATE type for daily aggregation
  totalUsdWorth   Decimal  @default(0) @map("total_usd_worth") @db.Decimal(32, 16)
  balanceSnapshot Json // JSON object containing detailed balance information
  currencyCount   Int      @default(0) @map("currency_count")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
}

// Enum for image types
enum ImageType {
  PROFILE
  PASSPORT
  DRIVING_LICENCE
  ID_CARD
  BVN
  SELFIE
}
